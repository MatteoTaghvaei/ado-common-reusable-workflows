parameters:
  - name: ENVIRONMENT
    type: string
    default: 'dev'
  - name: SERVICE_CONNECTION
    type: string

jobs:
- job: Terraform_Destroy_reusable
  displayName: Destroying
  continueOnError: false
  steps:
    # Install Terraform
    - task: TerraformInstaller@2
      inputs:
        terraformVersion: 'latest'  
    # Download the Terraform Plan artifact
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Terraform Plan'
      inputs:
        artifact: tfplan-${{ parameters.ENVIRONMENT }}
        path: '$(Pipeline.Workspace)/downloaded-plans' 
    # Verify the downloaded files
    - script: ls -alh "$(Pipeline.Workspace)/downloaded-plans"
   # Terraform Initalisation
    - task: TerraformCLI@2
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/infra/terraform'
        commandOptions: '-input=false -reconfigure'
        backendType: 'selfConfigured'
        allowTelemetryCollection: true
      env:
        TF_TOKEN_app_terraform_io: $(TFC_TOKEN)
    # Terraform Destroy
    - task: TerraformCLI@2
      displayName: 'Terraform Destroy'
      inputs:
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/infra/terraform'
        commandOptions: '-input=false -auto-approve "$(Pipeline.Workspace)/downloaded-plans/tfplan"'
        allowTelemetryCollection: true
        environmentServiceName: ${{ parameters.SERVICE_CONNECTION }}
        runAzLogin: true
      env:
        TF_TOKEN_app_terraform_io: $(TFC_TOKEN)
        TF_VAR_AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
        TF_VAR_AZURE_TENANT_ID: $(ARM_TENANT_ID)
        TF_VAR_AZURE_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        TF_VAR_AZURE_ENV: ${{ parameters.ENVIRONMENT }}


