parameters:
  - name: ENVIRONMENT
    type: string
    default: 'dev'
  - name: SERVICE_CONNECTION
    type: string
  - name: TFC_TOKEN
    type: string 

jobs:
  # Terraform Plan Job
  - job: Terraform_plan
    displayName: 'Terraform Plan Job'
    continueOnError: false
    steps:
      # Install Terraform
      - task: TerraformInstaller@2
        inputs:
          terraformVersion: 'latest'

      # Terraform Init (Terraform Cloud backend)
      - task: TerraformCLI@2
        displayName: 'Terraform Init'
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          commandOptions: '-input=false -reconfigure'
          backendType: 'selfConfigured'
          allowTelemetryCollection: true
        env:
          TF_TOKEN_app_terraform_io: ${{ parameters.TFC_TOKEN }}
          

      # Terraform Plan
      - task: TerraformCLI@2
        displayName: 'Terraform Plan'
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          commandOptions: '-out=tfplan'
          allowTelemetryCollection: true
          environmentServiceName: ${{ parameters.SERVICE_CONNECTION }}
          publishPlanResults: "{${{ parameters.ENVIRONMENT }}-plan}"  
        env:
          TF_TOKEN_app_terraform_io: ${{ parameters.TFC_TOKEN }}
          TF_VAR_AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
          TF_VAR_AZURE_TENANT_ID: $(ARM_TENANT_ID)
          TF_VAR_AZURE_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          TF_VAR_AZURE_ENV: ${{ parameters.ENVIRONMENT }}
        
      # Publish the Terraform Plan as an artifact
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Terraform Plan'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform/tfplan'
          artifact: 'tfplan'
          publishLocation: 'pipeline' # Publish to the pipeline
    